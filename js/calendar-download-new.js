// Universal Calendar Download Functions
// This script provides PDF and Excel generation for all monthly calendars

// Check if libraries are loaded and wait if needed
function waitForLibraries() {
    return new Promise((resolve, reject) => {
        let attempts = 0;
        const maxAttempts = 50; // 5 seconds max wait
        
        const checkLibraries = () => {
            attempts++;
            
            if (typeof window.jspdf !== 'undefined' && typeof XLSX !== 'undefined') {
                console.log('Libraries loaded successfully');
                resolve(true);
            } else if (attempts >= maxAttempts) {
                console.error('Libraries failed to load', {
                    jsPDF: typeof window.jspdf !== 'undefined',
                    XLSX: typeof XLSX !== 'undefined'
                });
                reject(new Error('Required libraries not loaded'));
            } else {
                setTimeout(checkLibraries, 100);
            }
        };
        
        checkLibraries();
    });
}

// Calendar data for 2026
const CALENDAR_2026_DATA = {
    'January': { days: 31, firstDay: 4, holidays: ['New Year\'s Day (Jan 1)', 'Martin Luther King Jr. Day (Jan 20)'] },
    'February': { days: 28, firstDay: 0, holidays: ['Valentine\'s Day (Feb 14)', 'Presidents Day (Feb 16)'] },
    'March': { days: 31, firstDay: 0, holidays: ['Spring Equinox (Mar 20)', 'Easter Sunday (Mar 29)'] },
    'April': { days: 30, firstDay: 3, holidays: ['April Fool\'s Day (Apr 1)', 'Easter Monday (Mar 30)'] },
    'May': { days: 31, firstDay: 5, holidays: ['May Day (May 1)', 'Mother\'s Day (May 10)', 'Memorial Day (May 25)'] },
    'June': { days: 30, firstDay: 1, holidays: ['Father\'s Day (Jun 21)', 'Summer Solstice (Jun 21)'] },
    'July': { days: 31, firstDay: 3, holidays: ['Independence Day (Jul 4)', 'Canada Day (Jul 1)'] },
    'August': { days: 31, firstDay: 6, holidays: ['Summer Bank Holiday (Aug 31)'] },
    'September': { days: 30, firstDay: 2, holidays: ['Labor Day (Sep 7)', 'Fall Equinox (Sep 22)'] },
    'October': { days: 31, firstDay: 4, holidays: ['Halloween (Oct 31)', 'Columbus Day (Oct 12)'] },
    'November': { days: 30, firstDay: 0, holidays: ['Thanksgiving (Nov 26)', 'Veterans Day (Nov 11)'] },
    'December': { days: 31, firstDay: 2, holidays: ['Christmas (Dec 25)', 'New Year\'s Eve (Dec 31)'] }
};

// Generate PDF for any month
async function generateMonthlyPDF(monthName) {
    try {
        await waitForLibraries();
        
        const { jsPDF } = window.jspdf;
        if (!jsPDF) {
            throw new Error('jsPDF library not available');
        }
        
        const doc = new jsPDF();
        
        const monthData = CALENDAR_2026_DATA[monthName];
        if (!monthData) {
            throw new Error('Invalid month name: ' + monthName);
        }
        
        // Set title
        doc.setFontSize(24);
        doc.text(`${monthName} 2026 Calendar`, 20, 30);
        
        // Calendar grid settings
        const startX = 20;
        const startY = 70;
        const cellWidth = 25;
        const cellHeight = 20;
        
        // Days of week header
        const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        doc.setFontSize(10);
        doc.setFont(undefined, 'bold');
        
        for (let i = 0; i < 7; i++) {
            doc.text(daysOfWeek[i], startX + (i * cellWidth) + 8, startY - 5);
        }
        
        doc.setFont(undefined, 'normal');
        
        // Draw calendar grid
        let currentDay = 1;
        for (let week = 0; week < 6; week++) {
            for (let day = 0; day < 7; day++) {
                const x = startX + (day * cellWidth);
                const y = startY + (week * cellHeight);
                
                // Draw cell border
                doc.rect(x, y, cellWidth, cellHeight);
                
                // Add day number
                if ((week === 0 && day >= monthData.firstDay) || (week > 0 && currentDay <= monthData.days)) {
                    doc.text(currentDay.toString(), x + 8, y + 12);
                    currentDay++;
                }
            }
            if (currentDay > monthData.days) break;
        }
        
        // Add holidays
        if (monthData.holidays.length > 0) {
            doc.setFontSize(14);
            doc.setFont(undefined, 'bold');
            doc.text(`${monthName} 2026 Holidays:`, 20, 210);
            
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            
            let yPos = 225;
            monthData.holidays.forEach(holiday => {
                doc.text(`â€¢ ${holiday}`, 25, yPos);
                yPos += 12;
            });
        }
        
        // Add footer
        doc.setFontSize(8);
        doc.text('Generated by Calendar2026.com', 20, 280);
        doc.text('Visit calendar2026.com for more calendar templates', 20, 285);
        
        // Download the PDF
        const fileName = `${monthName}-2026-Calendar.pdf`;
        doc.save(fileName);
        
        return fileName;
        
    } catch (error) {
        console.error('PDF generation error:', error);
        throw error;
    }
}

// Generate Excel for any month
async function generateMonthlyExcel(monthName) {
    try {
        await waitForLibraries();
        
        if (typeof XLSX === 'undefined') {
            throw new Error('XLSX library not available');
        }
        
        const monthData = CALENDAR_2026_DATA[monthName];
        if (!monthData) {
            throw new Error('Invalid month name: ' + monthName);
        }
        
        // Create calendar data array
        const calendarData = [
            [`${monthName} 2026 Calendar`],
            [], // Empty row
            ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        ];
        
        // Generate calendar weeks
        let currentDay = 1;
        for (let week = 0; week < 6; week++) {
            const weekRow = [];
            for (let day = 0; day < 7; day++) {
                if ((week === 0 && day >= monthData.firstDay) || (week > 0 && currentDay <= monthData.days)) {
                    weekRow.push(currentDay);
                    currentDay++;
                } else {
                    weekRow.push('');
                }
            }
            calendarData.push(weekRow);
            if (currentDay > monthData.days) break;
        }
        
        // Add holidays section
        calendarData.push([]);
        calendarData.push([`${monthName} 2026 Holidays:`]);
        monthData.holidays.forEach(holiday => {
            calendarData.push([holiday]);
        });
        
        // Create workbook
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet(calendarData);
        
        // Style the worksheet
        ws['!cols'] = [
            { wch: 12 }, { wch: 12 }, { wch: 12 }, { wch: 12 }, 
            { wch: 12 }, { wch: 12 }, { wch: 12 }
        ];
        
        XLSX.utils.book_append_sheet(wb, ws, monthName);
        
        // Download the Excel file
        const fileName = `${monthName}-2026-Calendar.xlsx`;
        XLSX.writeFile(wb, fileName);
        
        return fileName;
        
    } catch (error) {
        console.error('Excel generation error:', error);
        throw error;
    }
}

// Universal download function for monthly pages
async function downloadMonthlyCalendar(monthName, format = 'pdf') {
    // Show loading overlay
    showLoadingOverlay();
    
    try {
        let fileName;
        
        if (format.toLowerCase() === 'pdf') {
            fileName = await generateMonthlyPDF(monthName);
        } else if (format.toLowerCase() === 'excel') {
            fileName = await generateMonthlyExcel(monthName);
        } else {
            throw new Error('Invalid format specified: ' + format);
        }
        
        hideLoadingOverlay();
        
        // Track download
        if (window.affiliateTracker) {
            window.affiliateTracker.trackDownload(`${monthName} 2026 ${format.toUpperCase()}`);
        }
        
        alert(`${monthName} 2026 calendar downloaded successfully!\nFile: ${fileName}`);
        
    } catch (error) {
        console.error('Calendar generation error:', error);
        hideLoadingOverlay();
        alert(`Error generating ${format.toUpperCase()} calendar: ${error.message}\nPlease try again.`);
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    // Check if libraries are loaded
    setTimeout(() => {
        console.log('Library check:', {
            jsPDF: typeof window.jspdf !== 'undefined',
            XLSX: typeof XLSX !== 'undefined'
        });
    }, 1000);
});
